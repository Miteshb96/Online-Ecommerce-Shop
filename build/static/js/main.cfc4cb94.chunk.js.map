{"version":3,"sources":["component.js","App.js","serviceWorker.js","index.js"],"names":["SneakersShop","useState","data","setData","useEffect","fetch","method","body","headers","then","response","json","res","Products","length","class","Grid","container","spacing","className","item","direction","xs","src","image","alt","brand","name","price","useStyles","makeStyles","theme","drawer","width","flexShrink","whiteSpace","color","drawerOpen","transition","transitions","create","easing","sharp","duration","enteringScreen","backgroundImage","drawerClose","leavingScreen","overflowX","breakpoints","up","toolbar","display","alignItems","justifyContent","padding","mixins","App","classes","React","open","setOpen","IconStyle","TextStyle","Drawer","variant","clsx","paper","IconButton","onClick","fontSize","List","ListItem","button","key","ListItemIcon","style","ListItemText","primary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cfc4cb94.chunk.js","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\n\nfunction SneakersShop() {\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        fetch(`https://graphqlservice.herokuapp.com/graphql`, {\n            method: 'POST',\n            body: \"query { Products { id name brand quantity image price} }\",\n            headers: { \n            'Content-Type': 'application/graphql'\n            }\n        })\n            .then(function(response) {\n                return response.json()\n            })\n            .then(res => {\n                setData(res.data.Products)\n            })\n    }, [])\n\n    return (\n        <>\n            {data && data.length > 0 ?\n                <div class=\"wrapper\">\n                    <Grid container spacing={2} className=\"App-section img1\">\n                        <Grid container item className=\"product\" direction=\"row\" xs={12}>\n                            <Grid item xs={12}>\n                                <img\n                                    className=\"sideImage\"\n                                    src={data[0].image}\n                                    alt=\"Nike Air Jordan\"\n                                />\n                            </Grid>\n                            <Grid container item xs={5} direction=\"row\" class=\"prod1 img11\">\n                                <Grid item xs={12}>{`${data[0].brand} - ${data[0].name}`}</Grid>\n                                <Grid item xs={12}>{data[0].price} </Grid> \n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid container spacing={2} className=\"side-section\">\n                        <Grid container item className=\"product img2\" direction=\"row\" xs={6}>\n                            <Grid item xs={12}>\n                                <img\n                                    className=\"sideImage1\"\n                                    src={data[1].image}\n                                    alt=\"GeeksforGeeks logo\"\n                                />\n                            </Grid>\n                            <Grid container item xs={12} direction=\"row\" class=\"prod2 img21\">\n                                <Grid item xs={12}>{`${data[1].brand} - ${data[1].name}`}</Grid>\n                                <Grid item xs={12}>{data[1].price} </Grid> \n                            </Grid>\n                        </Grid>\n                        <Grid container item className=\"product img3\" direction=\"row\" xs={6}>\n                            <Grid item xs={12}>\n                                <img\n                                    className=\"sideImage1\"\n                                    src={data[2].image}\n                                    alt=\"GeeksforGeeks logo\"\n                                />\n                            </Grid>\n                            <Grid container item xs={12} direction=\"row\" class=\"prod3 img31\">\n                                <Grid item xs={12}>{`${data[2].brand} - ${data[2].name}`}</Grid>\n                                <Grid item xs={12}>{data[2].price} </Grid> \n                            </Grid>\n                        </Grid>\n                        <Grid container item className=\"product img4\" direction=\"row\" xs={6}>\n                            <Grid item xs={12}>\n                                <img\n                                    className=\"sideImage1\"\n                                    src={data[3].image}\n                                    alt=\"GeeksforGeeks logo\"\n                                />\n                            </Grid>\n                            <Grid container item xs={12} direction=\"row\" class=\"prod2 img41\">\n                                <Grid item xs={12}>{`${data[3].brand} - ${data[3].name}`}</Grid>\n                                <Grid item xs={12}>{data[3].price} </Grid> \n                            </Grid>\n                        </Grid>\n                        <Grid container item className=\"product img5\" direction=\"row\" xs={6}>\n                            <Grid item xs={12}>\n                                <img\n                                    className=\"sideImage1\"\n                                    src={data[4].image}\n                                    alt=\"GeeksforGeeks logo\"\n                                />\n                            </Grid>\n                            <Grid container item xs={12} direction=\"row\" class=\"prod3 img51\">\n                                <Grid item xs={12}>{`${data[4].brand} - ${data[4].name}`}</Grid>\n                                <Grid item xs={12}>{data[4].price} </Grid> \n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </div> \n                : null\n            }\n        </>\n    )\n}\n\nexport default SneakersShop; ","import React from 'react';\nimport './App.css';\nimport clsx from 'clsx';\nimport SneakersShop from \"./component\"\nimport List from '@material-ui/core/List';\nimport Drawer from '@material-ui/core/Drawer';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport InfoIcon from '@material-ui/icons/Info';\nimport ListItem from '@material-ui/core/ListItem';\nimport { makeStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport ContactsIcon from '@material-ui/icons/Contacts';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport LocalGroceryStoreIcon from '@material-ui/icons/LocalGroceryStore';\n\nconst drawerWidth = \"50%\";\n\nconst useStyles = makeStyles((theme) => ({\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n    whiteSpace: 'nowrap',\n    color: \"white !important\"\n  },\n  drawerOpen: {\n    width: drawerWidth,\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    backgroundImage: \"url('https://sneakerize.gr/wp-content/uploads/2018/12/Sneaker-Feature-.jpg')\"\n  },\n  drawerClose: {\n    transition: theme.transitions.create('width', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    overflowX: 'hidden',\n    width: theme.spacing(7) + 1,\n    [theme.breakpoints.up('sm')]: {\n      width: theme.spacing(9) + 1,\n    },\n  },\n  toolbar: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'flex-end',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const IconStyle = {display:\"flex\", justifyContent: \"center\"}\n  const TextStyle = { color: \"white\"}\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n\n  return (\n    <div>\n      <header className=\"header\">\n        {\"Shoe Store\"}\n      </header>\n      <Drawer\n        variant=\"permanent\"\n        className={clsx(classes.drawer, {\n          [classes.drawerOpen]: open,\n          [classes.drawerClose]: !open,\n        })}\n        classes={{\n          paper: clsx({\n            [classes.drawerOpen]: open,\n            [classes.drawerClose]: !open,\n          }),\n        }}\n      >\n        <div className={classes.toolbar}>\n          <IconButton onClick={!open ? handleDrawerOpen : handleDrawerClose}>\n            {open ? <ChevronLeftIcon color=\"secondary\" fontSize=\"large\" /> : <MenuIcon color=\"inherit\" fontSize=\"default\"/> }\n          </IconButton>\n        </div>\n        <List>\n          <ListItem button key={\"About\"}>\n            <ListItemIcon  style={IconStyle}> <InfoIcon color={open ? \"secondary\" : \"inherit\"} fontSize=\"default\" /> </ListItemIcon>\n            <ListItemText style={TextStyle} primary={\"About\"} />\n          </ListItem>\n          <ListItem button key={\"Accessories\"}>\n            <ListItemIcon style={IconStyle}> <InboxIcon color={open ? \"secondary\" : \"inherit\"} fontSize=\"default\" /> </ListItemIcon>\n            <ListItemText style={TextStyle} primary={\"Accessories\"} />\n          </ListItem>\n          <ListItem button key={\"Store\"}>\n            <ListItemIcon style={IconStyle}> <LocalGroceryStoreIcon color={open ? \"secondary\" : \"inherit\"} fontSize=\"default\" /> </ListItemIcon>\n            <ListItemText style={TextStyle} primary={\"Store\"} />\n          </ListItem>\n          <ListItem button key={\"Contact Us\"}>\n            <ListItemIcon style={IconStyle}> <ContactsIcon color={open ? \"secondary\" : \"inherit\"} fontSize=\"default\" /> </ListItemIcon>\n            <ListItemText style={TextStyle} primary={\"Contact Us\"} />\n          </ListItem>\n        </List>\n      </Drawer>\n      <SneakersShop />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}